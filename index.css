/* flexbox for 1 dimention layout
grid for 2 dimention layout */

/* responsive navbar */
.bar0 > li {
  padding: 10px;
  text-align: center;
  font-size: 2em;
  color: #ffeead;
  box-sizing: border-box;
  background-color: #96ceb4;
  list-style-type: none;
}

.bar0 {
  padding: 0;
}

.search > input {
  background: #ff6e68;
  border: 0;
  width: 100%;
  outline: 0;
  background: transparent;
  border-bottom: 1px solid #ffeead;
  color: #ffeead;
}

::placeholder{
  color: #ffeead;
}

.search-input:focus {
  outline: none;
}

.bar0 > .search {
  flex: 1;
}

@media all and (max-width: 600px) {
  .bar0 {
    flex-wrap: wrap;
  }
  .bar0 > li {
    flex: 1 1 50%;
  }
/* debug successful! */
  .bar0 > .search {
    flex: 1 1 50%;
  }
  .search > input {
    text-align: center;
  }
}

@media all and (max-width: 400px) {
  .container > li {
    flex: 1 1 100%;
  }
   .bar0 > .search {
    order: 1;
  }
}

/* for all, flex */
.container {
  border: 5px solid #ffcc5c;
  display: flex;
  margin-top: 20px;
}

/* flex justify-content bar1 */
.bar1 {
  /* flex-direction: column; */
  /* flex-direction: row; 
  default main axis is horizontal, 
  default cross axis is vertical
  */ 
  justify-content: center;
}

/* flex margin bar2*/
.bar2 .search {
  margin-left: auto; 
  /* push to the right */
}

/* flex responsive bar3*/
.bar3 {
  border: 5px solid #ffcc5c;
  display: flex;
}

.bar3 > div {
  flex: 1;
/* = width: 33.3333%; 
  = flex: 1 1 0;
  =
  flex-grow: 1;
  flex-shrink: 1;
  flex-basis: 0;
  flex-basis: 200px;
*/
}

.bar4 > div {
  flex: 1;
}
/* if remove this, all the item have fixed width */

.bar4 > .search {
  flex: 2;
}
/* .search won't work, because .container > div is more specific then .search */
/* if this is the only flex, 1,2,3, no matter what the number is */


/* height responsive
html, body {
  height: 100%;
} 
  .container {
  height: 100%;
  align-items: center;
  justify-content: center;
}
.logout {
  align-self: flex-start;
}
height: 100%; otherwise the height will just fit the content 
align-items: stretch; default
 */

.bar5 {
    /* flex-wrap: nowrap; default */
    flex-wrap: wrap;
}

.bar5 > div {
  width: 300px;
}

.item2 {
  order: 1;
}






/* basic grid and fraction units */
.grid1 {
    display: grid;
    grid-gap: 3px;
    /* grid-template-columns: 100px auto 100px;
    grid-template-rows: 50px 50px; */
    /* grid-template-columns: 100px auto;
    grid-template-rows: 50px 50px 200px; */
    /* grid-template-columns: 1fr 2fr 1fr; */
    /* grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 50px); */
    grid-template: repeat(2, 50px) / repeat(3, 1fr);
}

/* positioning grid */



/* grid template areas */
.grid2 {
    height: 300px;
    display: grid;
    grid-gap: 3px;
    grid-template-columns: repeat(12, 1fr);
    grid-template-rows: 40px auto 40px;
    grid-template-areas: 
        ". h h h h h h h h h h ."
        "m c c c c c c c c c c c"
        ". f f f f f f f f f f .";
}

.container > div {
  display: flex;
  justify-content: center;
  align-items: center;
}

.header {
    grid-area: h;
}

.menu {
    grid-area: m;
}

.content {
    grid-area: c;
}

.footer {
    grid-area: f;
}

.grid3 {
    margin-bottom: 100px;
    display: grid;
    grid-gap: 3px;
    grid-template-columns: repeat(12, 1fr);
    grid-template-rows: 40px 200px 40px; 
    /* to make the content take more space then menu, and more flexable,
    make it into 12 column and give the content a -1
    grid-template-columns: 1fr 4fr;
    grid-template-columns: repeat(12, 1fr); */
}

.a {
    /* column line, so 2 column have 3 lines */ 
    grid-column: 2 / -1;
}

.b {
    grid-row: 1 / 3;
}
/* menu will take the width as it need, by repeat 12 */

.c {
    grid-column: 2 / -1;
}

.d {
    /* grid-column: 1 / 2; */
    grid-column: 1 / -1;
    /* grid-column-start: 1;
    grid-column-end: 3; 
    = grid-column: 1/3;
    = grid-column: 1/span2;
    = grid-column: 1/-1; 
    target the very last column line, and sometimes we don't know how many line in total */
}

/* autofit and minmax */
.grid4 {
    display: grid;
    grid-gap: 5px;
    /* grid-template-columns: repeat(6, 1fr); 
    grid-template-rows: repeat(2, 100px);*/
    /* grid-template-columns: repeat(auto-fit, 100px); 
    this will leave some space on the right, because can't fit one element */
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    grid-auto-rows: 100px;
    /* auto-fill will add more columns when all the items are used, 
    auto-fit won't, autofit will keep fit all the width with all the items*/
}

/* named lines */
.grid5 {
    height: 300px; 
    display: grid;
    grid-gap: 3px;
    grid-template-columns: [main-start] 1fr [content-start] 5fr [content-end main-end];
    grid-template-rows: [main-start] 40px [content-start] auto [content-end] 40px [main-end]; 
}

.e {
    grid-column: main-start / main-end;
}

.f {
    justify-self: center;
    align-self: end;
    /* = .grid5 { justify-items: center;
    align-items: center;} */
}

.g {
    grid-column: content-start / content-end;
    /* = grid-area: content; */
}

.h {
    grid-column: main; 
    /* it will know it's main. = grid-column: content-start / content-end;*/
}










/* basic css */
.card {
    color: #222222;
    background: #96ceb4;
    width: full;
    margin-top: 20px;
    margin-left: auto;
    margin-right: auto;
    padding: 40px;
}

/* center one div element
1 display: blockï¼ˆtake the whole line)
2 must have a width 
3 margin left/right: auto 
*/

.btnsingle {
    display: block;
    /* Default width */
    margin-left: auto;
    margin-right: auto;  
    margin-top: 50px;     
    color: #0f1419;
    border: 1px solid #cfd9de;
    border-radius: 20px;
    background: #96ceb4;
    padding-top: 10px; /* top and bottom always less */
    padding-bottom: 10px;
    padding-left: 20px;
    padding-right: 20px;
    font-weight: bold;
}

/* center two element */
.main {
    margin-top: 100px;  
    text-align: center;  /* also work for button */
}

.search-input {
    display: block;
    width: 400px;
    margin-left: auto;
    margin-right: auto;
/* line-height instead of height can be honored by more browsers */
    line-height: 24px;
    padding-top: 10px;
    padding-bottom: 10px;
    padding-left: 30px;
    padding-right: 30px;
    border: 1px solid #dfe1e5;
    border-radius: 24px;
}

.btn {
    /* default display: inline; work together with text-align: center in main */
    margin-top: 30px;
    background: #96ceb4;
    border: none;
    padding-top: 8px;
    padding-bottom: 8px;
    padding-left: 16px;
    padding-right: 16px;
    border-radius: 10px;
    font-size: 14px;
}

/* center three element */
/* flexbox, block default, for a contrainer and direct children */
.nav-wrapper {
    display: flex;
    justify-content: center; /* end, start, space-around, space-between */
}
.item {
    text-align: center;
    border: 1px solid black;
    padding: 10px;
    margin-top: 100px;
    margin-bottom: 10px;
    margin-left: 10px;
    margin-right: 10px;
}

.cube {
    border: 8px solid #ff6f69;
    height: 260px;
    /*
    justify-content: 
    start, center, end, space-around, 
    space-evenly, space-between
    
    align-items: 
    start, center, end, 
    default value: stretch, height can overwrite it.
    if element stretch, check this.
    */
    display: flex; 
    justify-content: space-around; /* horizontal position */
    align-items: center; /* vertical position */
    /* flex-direction: column;  
    this will change the flex from horizontal to vertical, and
    change the main axis/cross axis also, justify-content always
    control the main axis */
}

.icon {
    width: 50px;
    height: 50px;
    margin: 2px;
    padding: 10px;
    font-size: 50px;
    border: 2px solid white;
    background: linear-gradient(#ff6f69, white);
}

/* .search > input: This selector targets an <input> element that is a direct child of an element with the class "search". It uses the child combinator (">") to select only the direct children. For example, <div class="search"><input></div> will be selected, but <div class="search"><div><input></div></div> will not be selected.
.search input: This selector targets an <input> element that is a descendant of an element with the class "search". It selects any <input> element that is inside an element with the class "search", regardless of the level of nesting. For example, both <div class="search"><input></div> and <div class="search"><div><input></div></div> will be selected. */


/* image grid */
/* .container {
    display: grid;
    grid-gap: 5px;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    grid-auto-rows: 75px;
    
    grid-auto-flow: dense;
    grid-auto-flow: row;
}

.horizontal {
    grid-column: span 2;
}

.vertical {
    grid-row: span 2;
}

.big {
    grid-column: span 2;
    grid-row: span 2;
} */